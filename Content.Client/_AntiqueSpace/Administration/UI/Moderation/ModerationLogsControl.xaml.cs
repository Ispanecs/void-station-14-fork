using Content.Client._AntiqueSpace.UserInterface;
using Content.Client._AntiqueSpace.UserInterface.Buttons;
using Content.Client.Administration.UI.CustomControls;
using Content.Shared.Actions;
using Content.Shared.Administration.Logs;
using Content.Shared.Database;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using System.Linq;
using System.Numerics;
using System.Runtime.InteropServices;
using static Content.Client._AntiqueSpace.UserInterface.Buttons.LogTypeMultiselectOptionButton<Content.Shared.Database.LogType>;
using static Robust.Client.UserInterface.Controls.BaseButton;
using static Robust.Client.UserInterface.Controls.BoxContainer;
using static Robust.Client.UserInterface.Controls.LineEdit;

namespace Content.Client._AntiqueSpace.Administration.UI.Moderation
{
    [GenerateTypedNameReferences]
    public sealed partial class ModerationLogsControl : Control
    {
        private readonly LogsList _logsList = new();

        private readonly Comparer<AdminLogPlayerButton> _adminLogPlayerButtonComparer =
            Comparer<AdminLogPlayerButton>.Create((a, b) =>
                string.Compare(a.Text, b.Text, StringComparison.Ordinal));

        public event Action<BaseActionEvent>? OnPinButtonPressed;
        public ModerationLogsControl(Control mainWindow)
        {
            RobustXamlLoader.Load(this);

            PlayerSearch.OnTextChanged += PlayerSearchChanged;
            LogSearch.OnTextChanged += LogSearchChanged;

            SelectAllPlayersButton.OnPressed += SelectAllPlayers;
            SelectNoPlayersButton.OnPressed += SelectNoPlayers;

            RoundSpinBox.IsValid = i => i > 0 && i <= CurrentRound;
            RoundSpinBox.ValueChanged += RoundSpinBoxChanged;
            RoundSpinBox.InitDefaultButtons();

            ResetRoundButton.OnPressed += ResetRoundPressed;

            SetImpacts(Enum.GetValues<LogImpact>().OrderBy(impact => impact).ToArray());
            SetTypes(_logsList.TypesDictionary);

            TypeButton.OnPressed += CreateBoxType;

            MainWindow = mainWindow;
            IoCManager.InjectDependencies(this);
        }
        private int CurrentRound { get; set; }

        private Dictionary<AdminLogPlayerButton, PinTextureButton> _pinnedPlayers = [];
        private bool _allSelected = true;

        private Control MainWindow { get; }
        public int SelectedRoundId => RoundSpinBox.Value;
        public string Search => LogSearch.Text;
        private int ShownLogs { get; set; }
        private int TotalLogs { get; set; }
        private int RoundLogs { get; set; }
        public HashSet<Guid> SelectedPlayers { get; } = [];
        public HashSet<LogType> SelectedTypes { get; } = [];
        public HashSet<LogImpact> SelectedImpacts { get; } = [];

        public void SetCurrentRound(int round)
        {
            CurrentRound = round;
            ResetRoundButton.Text = Loc.GetString("admin-logs-reset-with-id", ("id", round));
            UpdateResetButton();
        }

        public void SetRoundSpinBox(int round)
        {
            RoundSpinBox.Value = round;
            UpdateResetButton();
        }

        private void RoundSpinBoxChanged(ValueChangedEventArgs args)
        {
            UpdateResetButton();
        }

        private void UpdateResetButton()
        {
            ResetRoundButton.Disabled = RoundSpinBox.Value == CurrentRound;
        }

        private void ResetRoundPressed(ButtonEventArgs args)
        {
            RoundSpinBox.Value = CurrentRound;
        }

        private void LogSearchChanged(LineEditEventArgs args)
        {
            UpdateLogs();
        }

        private void UpdateLogs()
        {
            ShownLogs = 0;

            foreach (var child in LogsContainer.Children)
            {
                if (child is not AdminLogLabel log)
                {
                    continue;
                }

                child.Visible = ShouldShowLog(log);
                if (child.Visible)
                {
                    ShownLogs++;
                }
            }

            UpdateCount();
        }

        private bool LogMatchesPlayerFilter(AdminLogLabel label)
        {
            if (label.Log.Players.Length == 0)
                return SelectedPlayers.Count == 0;

            return SelectedPlayers.Overlaps(label.Log.Players);
        }

        private bool ShouldShowLog(AdminLogLabel label)
        {
            // Проверяем типы
            if (!SelectedTypes.Contains(label.Log.Type))
                return false;

            // Check players
            if (!LogMatchesPlayerFilter(label))
                return false;

            // Check impact
            if (!SelectedImpacts.Contains(label.Log.Impact))
                return false;

            // Check search
            if (label.Text is not null)
                if (!label.Text.Contains(LogSearch.Text, StringComparison.OrdinalIgnoreCase))
                    return false;

            return true;
        }

        private void PlayerButtonPressed(ButtonEventArgs args)
        {
            var button = (AdminLogPlayerButton)args.Button;
            if (button.Pressed)
            {
                SelectedPlayers.Add(button.Id);
            }
            else
            {
                SelectedPlayers.Remove(button.Id);
            }

            UpdateLogs();
        }

        private void ImpactButtonPressed(ButtonEventArgs args)
        {
            var button = (AdminLogImpactButton)args.Button;
            if (button.Pressed)
            {
                SelectedImpacts.Add(button.Impact);
            }
            else
            {
                SelectedImpacts.Remove(button.Impact);
            }

            UpdateLogs();
        }

        private void SetImpacts(LogImpact[] impacts)
        {
            LogImpactContainer.RemoveAllChildren();

            foreach (var impact in impacts)
            {
                var button = new AdminLogImpactButton(impact)
                {
                    Text = impact.ToString()
                };

                SelectedImpacts.Add(impact);
                button.OnPressed += ImpactButtonPressed;

                LogImpactContainer.AddChild(button);
            }

            switch (impacts.Length)
            {
                case 0:
                    return;
                case 1:
                    LogImpactContainer.GetChild(0).StyleClasses.Add("OpenRight");
                    return;
            }

            for (var i = 0; i < impacts.Length - 1; i++)
            {
                LogImpactContainer.GetChild(i).StyleClasses.Add("ButtonSquare");
            }

            LogImpactContainer.GetChild(LogImpactContainer.ChildCount - 1).StyleClasses.Add("OpenLeft");
        }

        #region PlayerMethods
        public void SetPlayers(Dictionary<Guid, string> players)
        {
            var buttons = new SortedDictionary<AdminLogPlayerButton, PinTextureButton>(_adminLogPlayerButtonComparer);

            //Востанавливаем наши кнопки если они перешли с прошлого раунда.
            foreach (var control in PlayersContainer.Children.ToArray())
            {
                if (control is not BoxContainer boxContainer)
                    continue;

                var playerButton = (AdminLogPlayerButton)boxContainer.GetChild(0);
                if (!SelectedPlayers.Contains(playerButton.Id))
                    _allSelected = false;

                var pinButton = (PinTextureButton)boxContainer.GetChild(1);
                if (!players.Remove(playerButton.Id))
                    continue;

                buttons.Add(playerButton, pinButton);
            }

            foreach (var (id, name) in players)
            {
                var button = new AdminLogPlayerButton(id)
                {
                    Text = name,
                    Pressed = _allSelected,
                    HorizontalExpand = true
                };

                var pin = new PinTextureButton(id, false);
                pin.SetupPin(pin);
                pin.OnPinButtonStatusChanged += _ =>
                {
                    StorePinnedPlayer();
                    Filter();
                };
                button.OnPressed += PlayerButtonPressed;

                foreach (var (playerButton, pinButton) in _pinnedPlayers)
                {
                    if (playerButton.Id == button.Id)
                    {
                        button = playerButton;
                        pin = pinButton;
                    }
                }

                if (button.Pressed)
                    SelectedPlayers.Add(id);

                buttons.Add(button, pin);
            }

            foreach (var box in PlayersContainer.Children.ToArray())
            {
                box.RemoveAllChildren();
            }
            PlayersContainer.RemoveAllChildren();

            foreach (var (player, pin) in buttons)
            {
                var boxContainer = new BoxContainer()
                {
                    Access = AccessLevel.Public,
                    Orientation = LayoutOrientation.Horizontal,
                    HorizontalExpand = true
                };
                boxContainer.AddChild(player);
                boxContainer.AddChild(pin);
                PlayersContainer.AddChild(boxContainer);
            }

            PlayersContainer.Measure(Vector2Helpers.Infinity);
            Filter();
            UpdatePlayers();
            UpdateLogs();
        }

        private void StorePinnedPlayer()
        {
            foreach (var box in PlayersContainer.Children.ToArray())
            {
                var playerButton = (AdminLogPlayerButton)box.GetChild(0);
                var pinButton = (PinTextureButton)box.GetChild(1);

                if (!_pinnedPlayers.ContainsKey(playerButton) && pinButton.IsPinned)
                    _pinnedPlayers.Add(playerButton, pinButton);

                if (_pinnedPlayers.ContainsKey(playerButton) && !pinButton.IsPinned)
                    _pinnedPlayers.Remove(playerButton);
            }
        }

        private void Filter()
        {
            var unPinnedPlayers = new SortedDictionary<AdminLogPlayerButton, PinTextureButton>(_adminLogPlayerButtonComparer);
            var pinnedPlayers = new SortedDictionary<AdminLogPlayerButton, PinTextureButton>(_adminLogPlayerButtonComparer);
            // Разделяем закреплённых и не закреплённых игроков.
            foreach (var box in PlayersContainer.Children.ToArray())
            {
                var player = (AdminLogPlayerButton)box.GetChild(0);
                var pin = (PinTextureButton)box.GetChild(1);
                if (player.Text == null)
                    continue;

                if (pin.IsPinned)
                    pinnedPlayers.Add(player, pin);
                else if (string.IsNullOrEmpty(PlayerSearch.Text) || player.Text.Contains(PlayerSearch.Text.Trim(), StringComparison.InvariantCultureIgnoreCase))
                    unPinnedPlayers.Add(player, pin);

                box.RemoveAllChildren();
            }

            PlayersContainer.RemoveAllChildren();

            // Добавляем последовательно сначала закреплённых, а после не закреплённых.
            foreach (var (player, pin) in pinnedPlayers)
            {
                var boxContainer = new BoxContainer()
                {
                    Access = AccessLevel.Public,
                    Orientation = LayoutOrientation.Horizontal,
                    HorizontalExpand = true
                };
                boxContainer.AddChild(player);
                boxContainer.AddChild(pin);
                PlayersContainer.AddChild(boxContainer);
            }
            foreach (var (player, pin) in unPinnedPlayers)
            {
                var boxContainer = new BoxContainer()
                {
                    Access = AccessLevel.Public,
                    Orientation = LayoutOrientation.Horizontal,
                    HorizontalExpand = true
                };
                boxContainer.AddChild(player);
                boxContainer.AddChild(pin);
                PlayersContainer.AddChild(boxContainer);
            }
        }

        private void SelectAllPlayers(ButtonEventArgs args)
        {
            SelectedPlayers.Clear();

            foreach (var box in PlayersContainer.Children.ToArray())
            {
                var player = (AdminLogPlayerButton)box.GetChild(0);

                player.Pressed = true;
                SelectedPlayers.Add(player.Id);
            }

            _allSelected = true;
            UpdateLogs();
        }

        private void SelectNoPlayers(ButtonEventArgs args)
        {
            SelectedPlayers.Clear();

            foreach (var box in PlayersContainer.Children.ToArray())
            {
                var player = (AdminLogPlayerButton)box.GetChild(0);

                player.Pressed = false;
            }

            _allSelected = false;
            UpdateLogs();
        }

        private bool ShouldShowPlayer(AdminLogPlayerButton button, PinTextureButton pin)
        {
            return button.Text != null &&
                   button.Text.Contains(PlayerSearch.Text, StringComparison.OrdinalIgnoreCase) || pin.IsPinned;
        }

        private void PlayerSearchChanged(LineEditEventArgs args)
        {
            UpdatePlayers();
        }

        private void UpdatePlayers()
        {
            foreach (var control in PlayersContainer.Children)
            {
                if (control is not BoxContainer player)
                {
                    continue;
                }

                player.Visible = ShouldShowPlayer((AdminLogPlayerButton)player.GetChild(0), (PinTextureButton)player.GetChild(1));
            }
        }
        #endregion PlayerMethods

        #region TypeMethods

        public void CreateBoxType(ButtonEventArgs args)
        {
            var button = (Button)args.Button;

            if (button.Pressed)
            {
                SecondSeparator.Visible = true;
                TypeContainer.Visible = true;
                MainWindow.SetSize += new Vector2(TypeContainer.Width + SecondSeparator.PixelWidth, 0);
            }
            else
            {
                SecondSeparator.Visible = false;
                TypeContainer.Visible = false;
                MainWindow.SetSize -= new Vector2(TypeContainer.Width + SecondSeparator.PixelWidth, 0);
            }
        }

        public void SetTypes(SortedDictionary<string, List<LogType>> typeDictionary)
        {
            var box = new BoxContainer()
            {
                Orientation = LayoutOrientation.Vertical,
            };
            TypeContainer.ReturnMeasure = true;
            TypeContainer.AddChild(box);

            foreach (var (name, list) in typeDictionary)
            {
                var typeTabButton = new LogTypeMultiselectOptionButton<LogType>()
                {
                    Label = Loc.GetString(name),
                    StyleClasses = { "OpenLeft" },
                };
                typeTabButton.Measure(Vector2Helpers.Infinity);

                foreach (var type in list)
                {
                    typeTabButton.AddItem(Loc.GetString(type.ToString().ToLower() + "-moderation-logs"), type, true);
                }
                typeTabButton.OnItemSelected += OnTypeItemSelected;
                typeTabButton.OnTypeSelected += OnTypeSelected;
                box.AddChild(typeTabButton);

                UpdateTypes(typeTabButton);
            }

            box.Measure(Vector2Helpers.Infinity);
            TypeContainer.Measure(Vector2Helpers.Infinity);
            SecondSeparator.Measure(Vector2Helpers.Infinity);
            SecondSeparator.Arrange(new UIBox2(Vector2.Zero, SecondSeparator.DesiredSize));
            TypeContainer.Arrange(new UIBox2(Vector2.Zero, TypeContainer.DesiredSize));

            TypeContainer.Visible = false;
            SecondSeparator.Visible = false;
        }

        private void UpdateTypes(LogTypeMultiselectOptionButton<LogType> optionButton)
        {
            foreach (var logType in optionButton.SelectedKeys)
            {
                SelectedTypes.Add(logType);
            }
            UpdateLogs();
        }

        private void OnTypeItemSelected(ItemPressedEventArgs args)
        {
            if (args.Selected)
            {
                SelectedTypes.Add(args.Key);
            }
            else
            {
                SelectedTypes.Remove(args.Key);
            }
            UpdateLogs();
        }

        private void OnTypeSelected(TypePressedEventArgs args)
        {
            var button = args.Button;
            if (button.Pressed)
            {
                foreach (var type in args.Keys)
                {
                    SelectedTypes.Add(type);
                }
            }
            else
            {
                foreach (var type in args.Keys)
                {
                    SelectedTypes.Remove(type);
                }
            }
            UpdateLogs();
        }
        #endregion TypeMethods
        public void AddLogs(List<SharedAdminLog> logs)
        {
            var span = CollectionsMarshal.AsSpan(logs);
            for (var i = 0; i < span.Length; i++)
            {
                ref var log = ref span[i];
                var separator = new HSeparator();
                var label = new AdminLogLabel(ref log, separator);
                label.Visible = ShouldShowLog(label);

                TotalLogs++;
                if (label.Visible)
                {
                    ShownLogs++;
                }

                LogsContainer.AddChild(label);
                LogsContainer.AddChild(separator);
            }

            UpdateCount();
        }

        public void SetLogs(List<SharedAdminLog> logs)
        {
            LogsContainer.RemoveAllChildren();
            UpdateCount(0, 0);
            AddLogs(logs);
        }

        public void UpdateCount(int? shown = null, int? total = null, int? round = null)
        {
            if (shown != null)
            {
                ShownLogs = shown.Value;
            }

            if (total != null)
            {
                TotalLogs = total.Value;
            }

            if (round != null)
            {
                RoundLogs = round.Value;
            }

            Count.Text = Loc.GetString(
                "admin-logs-count",
                ("showing", ShownLogs), ("total", TotalLogs), ("round", RoundLogs)
            );
        }

        protected override void Dispose(bool disposing)
        {
            base.Dispose(disposing);

            RoundSpinBox.IsValid = null;
            RoundSpinBox.ValueChanged -= RoundSpinBoxChanged;

            ResetRoundButton.OnPressed -= ResetRoundPressed;
        }
    }
}
